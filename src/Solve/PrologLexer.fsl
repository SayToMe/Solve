{

module PrologLexer
open Microsoft.FSharp.Text.Lexing
open System
open PrologParser

exception SyntaxError of string

let lexeme = LexBuffer.LexemeString

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine
}

let int = ['-' '+']? ['0'-'9']+
let digit = ['0'-'9']
let frac = '.' digit*
let exp = ['e' 'E'] ['-' '+']? digit+

let white = [' ' '\t']+
let newline = '\r' | '\n' | "\r\n"

rule read =
  parse
  | white    { read lexbuf }
  | newline  { newline lexbuf; read lexbuf }
  | int      { INT (int (lexeme lexbuf)) }
  | "true"   { TRUE }
  | "false"  { FALSE }
  | "null"   { NULL }
  | '"'      { read_string "" false lexbuf } 
  | '('      { LEFT_BRACKET }
  | ')'      { RIGHT_BRACKET }
  | '['      { LEFT_BRACK }
  | ']'      { RIGHT_BRACK }
  | ':'      { COLON }
  | '+'      { PLUS }
  | '-'      { MINUS }
  | '*'      { ASTERISK }
  | '/'      { SLASH }
  | ','      { COMMA }
  | '.'      { DOT }
  | '?'      { QUESTION_MARK }
  | "is"     { IS }
  | ['a'-'z']['A'-'Z' 'a'-'z']*     { ATOM(lexeme lexbuf) }
  | ['A'-'Z']['A'-'Z' 'a'-'z']*     { VAR(lexeme lexbuf) }
  | eof      { EOF }
  | _ { raise (Exception (sprintf "SyntaxError: Unexpected char: '%s' Line: %d Column: %d" (lexeme lexbuf) (lexbuf.StartPos.Line+1) lexbuf.StartPos.Column)) }


and read_string str ignorequote =
  parse
  | '"'           { if ignorequote  then (read_string (str+"\\\"") false lexbuf) else STRING (str) }
  | '\\'          { read_string str true lexbuf }
  | [^ '"' '\\']+ { read_string (str+(lexeme lexbuf)) false lexbuf }
| eof { raise (Exception ("String is not terminated")) }