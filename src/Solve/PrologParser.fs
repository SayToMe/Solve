// Implementation file for parser generated by fsyacc
module PrologParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "PrologParser.fsy"

open Solve

open Solve.TermTypes
open Solve.TermTypes.Transformers

open Solve.Rule
open Solve.Rule.Transformers

type ParseResult =
    | RuleParseResult of Rule
    | CallParseResult of Goal

# 20 "PrologParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LESS_THAN_SIGN
  | GREATER_THAN_SIGN
  | EQUALS_SIGN
  | QUESTION_MARK
  | DOT
  | SEMICOLON
  | COMMA
  | SLASH
  | ASTERISK
  | MINUS
  | PLUS
  | COLON
  | RIGHT_BRACK
  | LEFT_BRACK
  | RIGHT_BRACKET
  | LEFT_BRACKET
  | NULL
  | FALSE
  | TRUE
  | IS
  | STRING of (string)
  | VAR of (string)
  | ATOM of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LESS_THAN_SIGN
    | TOKEN_GREATER_THAN_SIGN
    | TOKEN_EQUALS_SIGN
    | TOKEN_QUESTION_MARK
    | TOKEN_DOT
    | TOKEN_SEMICOLON
    | TOKEN_COMMA
    | TOKEN_SLASH
    | TOKEN_ASTERISK
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_COLON
    | TOKEN_RIGHT_BRACK
    | TOKEN_LEFT_BRACK
    | TOKEN_RIGHT_BRACKET
    | TOKEN_LEFT_BRACKET
    | TOKEN_NULL
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_IS
    | TOKEN_STRING
    | TOKEN_VAR
    | TOKEN_ATOM
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_prog
    | NONTERM_fact
    | NONTERM_rule
    | NONTERM_signature
    | NONTERM_goal
    | NONTERM_parameter
    | NONTERM_parameterList
    | NONTERM_termList
    | NONTERM_body
    | NONTERM_calcExpr
    | NONTERM_term

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LESS_THAN_SIGN  -> 1 
  | GREATER_THAN_SIGN  -> 2 
  | EQUALS_SIGN  -> 3 
  | QUESTION_MARK  -> 4 
  | DOT  -> 5 
  | SEMICOLON  -> 6 
  | COMMA  -> 7 
  | SLASH  -> 8 
  | ASTERISK  -> 9 
  | MINUS  -> 10 
  | PLUS  -> 11 
  | COLON  -> 12 
  | RIGHT_BRACK  -> 13 
  | LEFT_BRACK  -> 14 
  | RIGHT_BRACKET  -> 15 
  | LEFT_BRACKET  -> 16 
  | NULL  -> 17 
  | FALSE  -> 18 
  | TRUE  -> 19 
  | IS  -> 20 
  | STRING _ -> 21 
  | VAR _ -> 22 
  | ATOM _ -> 23 
  | INT _ -> 24 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LESS_THAN_SIGN 
  | 2 -> TOKEN_GREATER_THAN_SIGN 
  | 3 -> TOKEN_EQUALS_SIGN 
  | 4 -> TOKEN_QUESTION_MARK 
  | 5 -> TOKEN_DOT 
  | 6 -> TOKEN_SEMICOLON 
  | 7 -> TOKEN_COMMA 
  | 8 -> TOKEN_SLASH 
  | 9 -> TOKEN_ASTERISK 
  | 10 -> TOKEN_MINUS 
  | 11 -> TOKEN_PLUS 
  | 12 -> TOKEN_COLON 
  | 13 -> TOKEN_RIGHT_BRACK 
  | 14 -> TOKEN_LEFT_BRACK 
  | 15 -> TOKEN_RIGHT_BRACKET 
  | 16 -> TOKEN_LEFT_BRACKET 
  | 17 -> TOKEN_NULL 
  | 18 -> TOKEN_FALSE 
  | 19 -> TOKEN_TRUE 
  | 20 -> TOKEN_IS 
  | 21 -> TOKEN_STRING 
  | 22 -> TOKEN_VAR 
  | 23 -> TOKEN_ATOM 
  | 24 -> TOKEN_INT 
  | 27 -> TOKEN_end_of_input
  | 25 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_prog 
    | 3 -> NONTERM_prog 
    | 4 -> NONTERM_prog 
    | 5 -> NONTERM_prog 
    | 6 -> NONTERM_fact 
    | 7 -> NONTERM_rule 
    | 8 -> NONTERM_signature 
    | 9 -> NONTERM_goal 
    | 10 -> NONTERM_parameter 
    | 11 -> NONTERM_parameterList 
    | 12 -> NONTERM_parameterList 
    | 13 -> NONTERM_parameterList 
    | 14 -> NONTERM_termList 
    | 15 -> NONTERM_termList 
    | 16 -> NONTERM_termList 
    | 17 -> NONTERM_body 
    | 18 -> NONTERM_body 
    | 19 -> NONTERM_body 
    | 20 -> NONTERM_body 
    | 21 -> NONTERM_body 
    | 22 -> NONTERM_body 
    | 23 -> NONTERM_body 
    | 24 -> NONTERM_body 
    | 25 -> NONTERM_body 
    | 26 -> NONTERM_calcExpr 
    | 27 -> NONTERM_calcExpr 
    | 28 -> NONTERM_calcExpr 
    | 29 -> NONTERM_calcExpr 
    | 30 -> NONTERM_calcExpr 
    | 31 -> NONTERM_term 
    | 32 -> NONTERM_term 
    | 33 -> NONTERM_term 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 27 
let _fsyacc_tagOfErrorTerminal = 25

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LESS_THAN_SIGN  -> "LESS_THAN_SIGN" 
  | GREATER_THAN_SIGN  -> "GREATER_THAN_SIGN" 
  | EQUALS_SIGN  -> "EQUALS_SIGN" 
  | QUESTION_MARK  -> "QUESTION_MARK" 
  | DOT  -> "DOT" 
  | SEMICOLON  -> "SEMICOLON" 
  | COMMA  -> "COMMA" 
  | SLASH  -> "SLASH" 
  | ASTERISK  -> "ASTERISK" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | COLON  -> "COLON" 
  | RIGHT_BRACK  -> "RIGHT_BRACK" 
  | LEFT_BRACK  -> "LEFT_BRACK" 
  | RIGHT_BRACKET  -> "RIGHT_BRACKET" 
  | LEFT_BRACKET  -> "LEFT_BRACKET" 
  | NULL  -> "NULL" 
  | FALSE  -> "FALSE" 
  | TRUE  -> "TRUE" 
  | IS  -> "IS" 
  | STRING _ -> "STRING" 
  | VAR _ -> "VAR" 
  | ATOM _ -> "ATOM" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LESS_THAN_SIGN  -> (null : System.Object) 
  | GREATER_THAN_SIGN  -> (null : System.Object) 
  | EQUALS_SIGN  -> (null : System.Object) 
  | QUESTION_MARK  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | ASTERISK  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | RIGHT_BRACK  -> (null : System.Object) 
  | LEFT_BRACK  -> (null : System.Object) 
  | RIGHT_BRACKET  -> (null : System.Object) 
  | LEFT_BRACKET  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | IS  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ATOM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 0us; 8us; 1us; 65535us; 0us; 9us; 1us; 65535us; 0us; 10us; 4us; 65535us; 5us; 6us; 12us; 33us; 39us; 33us; 40us; 33us; 2us; 65535us; 16us; 25us; 26us; 27us; 1us; 65535us; 16us; 17us; 1us; 65535us; 21us; 22us; 3us; 65535us; 12us; 13us; 39us; 37us; 40us; 38us; 5us; 65535us; 35us; 36us; 52us; 48us; 53us; 49us; 54us; 50us; 55us; 51us; 15us; 65535us; 12us; 34us; 16us; 24us; 21us; 28us; 26us; 24us; 29us; 30us; 35us; 47us; 39us; 34us; 40us; 34us; 41us; 42us; 43us; 44us; 45us; 46us; 52us; 47us; 53us; 47us; 54us; 47us; 55us; 47us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 9us; 11us; 16us; 19us; 21us; 23us; 27us; 33us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 5us; 2us; 6us; 7us; 1us; 7us; 1us; 7us; 3us; 7us; 21us; 22us; 1us; 7us; 1us; 8us; 1us; 8us; 2us; 8us; 12us; 1us; 8us; 1us; 9us; 2us; 9us; 33us; 1us; 9us; 2us; 9us; 15us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 17us; 1us; 18us; 1us; 19us; 4us; 20us; 23us; 24us; 25us; 1us; 20us; 5us; 20us; 27us; 28us; 29us; 30us; 3us; 21us; 21us; 22us; 3us; 21us; 22us; 22us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 26us; 5us; 27us; 27us; 28us; 29us; 30us; 5us; 27us; 28us; 28us; 29us; 30us; 5us; 27us; 28us; 29us; 29us; 30us; 5us; 27us; 28us; 29us; 30us; 30us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 23us; 25us; 27us; 31us; 33us; 35us; 37us; 40us; 42us; 44us; 47us; 49us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 79us; 81us; 87us; 91us; 95us; 97us; 99us; 101us; 103us; 105us; 107us; 109us; 111us; 113us; 119us; 125us; 131us; 137us; 139us; 141us; 143us; 145us; 147us; 149us; |]
let _fsyacc_action_rows = 59
let _fsyacc_actionTableElements = [|3us; 32768us; 0us; 3us; 4us; 4us; 23us; 15us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 1us; 32768us; 10us; 5us; 1us; 32768us; 23us; 19us; 1us; 32768us; 5us; 7us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 1us; 16390us; 12us; 11us; 1us; 32768us; 10us; 12us; 5us; 32768us; 18us; 32us; 19us; 31us; 22us; 57us; 23us; 20us; 24us; 56us; 3us; 32768us; 5us; 14us; 6us; 40us; 7us; 39us; 0us; 16391us; 1us; 32768us; 16us; 16us; 3us; 16397us; 22us; 57us; 23us; 58us; 24us; 56us; 2us; 32768us; 7us; 26us; 15us; 18us; 0us; 16392us; 1us; 32768us; 16us; 21us; 1us; 16417us; 16us; 21us; 3us; 16400us; 22us; 57us; 23us; 58us; 24us; 56us; 2us; 32768us; 7us; 29us; 15us; 23us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 3us; 32768us; 22us; 57us; 23us; 58us; 24us; 56us; 0us; 16396us; 0us; 16398us; 3us; 32768us; 22us; 57us; 23us; 58us; 24us; 56us; 0us; 16399us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 4us; 32768us; 1us; 45us; 2us; 43us; 3us; 41us; 20us; 35us; 3us; 32768us; 22us; 57us; 23us; 58us; 24us; 56us; 4us; 16404us; 8us; 55us; 9us; 54us; 10us; 53us; 11us; 52us; 2us; 16405us; 6us; 40us; 7us; 39us; 2us; 16406us; 6us; 40us; 7us; 39us; 5us; 32768us; 18us; 32us; 19us; 31us; 22us; 57us; 23us; 20us; 24us; 56us; 5us; 32768us; 18us; 32us; 19us; 31us; 22us; 57us; 23us; 20us; 24us; 56us; 3us; 32768us; 22us; 57us; 23us; 58us; 24us; 56us; 0us; 16407us; 3us; 32768us; 22us; 57us; 23us; 58us; 24us; 56us; 0us; 16408us; 3us; 32768us; 22us; 57us; 23us; 58us; 24us; 56us; 0us; 16409us; 0us; 16410us; 4us; 16411us; 8us; 55us; 9us; 54us; 10us; 53us; 11us; 52us; 4us; 16412us; 8us; 55us; 9us; 54us; 10us; 53us; 11us; 52us; 4us; 16413us; 8us; 55us; 9us; 54us; 10us; 53us; 11us; 52us; 4us; 16414us; 8us; 55us; 9us; 54us; 10us; 53us; 11us; 52us; 3us; 32768us; 22us; 57us; 23us; 58us; 24us; 56us; 3us; 32768us; 22us; 57us; 23us; 58us; 24us; 56us; 3us; 32768us; 22us; 57us; 23us; 58us; 24us; 56us; 3us; 32768us; 22us; 57us; 23us; 58us; 24us; 56us; 0us; 16415us; 0us; 16416us; 0us; 16417us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 6us; 7us; 9us; 11us; 13us; 14us; 15us; 16us; 18us; 20us; 26us; 30us; 31us; 33us; 37us; 40us; 41us; 43us; 45us; 49us; 52us; 53us; 54us; 55us; 59us; 60us; 61us; 65us; 66us; 67us; 68us; 69us; 74us; 78us; 83us; 86us; 89us; 95us; 101us; 105us; 106us; 110us; 111us; 115us; 116us; 117us; 122us; 127us; 132us; 137us; 141us; 145us; 149us; 153us; 154us; 155us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 4us; 1us; 1us; 1us; 5us; 4us; 4us; 1us; 1us; 3us; 0us; 1us; 3us; 0us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 8us; 8us; 9us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 11us; 11us; 11us; 12us; 12us; 12us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 65535us; 65535us; 65535us; 16387us; 16388us; 16389us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 65535us; 16393us; 16394us; 16395us; 65535us; 16396us; 16398us; 65535us; 16399us; 16401us; 16402us; 16403us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16407us; 65535us; 16408us; 65535us; 16409us; 16410us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16415us; 16416us; 16417us; |]
let _fsyacc_reductions ()  =    [| 
# 264 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ParseResult option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 273 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "PrologParser.fsy"
                                   _1 
                   )
# 47 "PrologParser.fsy"
                 : ParseResult option));
# 284 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "PrologParser.fsy"
                              None 
                   )
# 50 "PrologParser.fsy"
                 : 'prog));
# 294 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'goal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "PrologParser.fsy"
                                                       Some <| CallParseResult _3 
                   )
# 51 "PrologParser.fsy"
                 : 'prog));
# 305 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fact)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "PrologParser.fsy"
                               Some <| RuleParseResult _1 
                   )
# 52 "PrologParser.fsy"
                 : 'prog));
# 316 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "PrologParser.fsy"
                               Some <| RuleParseResult _1 
                   )
# 53 "PrologParser.fsy"
                 : 'prog));
# 327 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'signature)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "PrologParser.fsy"
                                    Rule(_1, True) 
                   )
# 56 "PrologParser.fsy"
                 : 'fact));
# 338 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'signature)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "PrologParser.fsy"
                                                            Rule(_1, _4) 
                   )
# 59 "PrologParser.fsy"
                 : 'rule));
# 350 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameterList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "PrologParser.fsy"
                                                                        Signature(_1, _3) 
                   )
# 62 "PrologParser.fsy"
                 : 'signature));
# 362 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'termList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "PrologParser.fsy"
                                                                   Solve.Rule.Goal(Solve.TermTypes.Structure(_1, _3)) 
                   )
# 65 "PrologParser.fsy"
                 : 'goal));
# 374 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "PrologParser.fsy"
                                  Parameter(_1) 
                   )
# 68 "PrologParser.fsy"
                 : 'parameter));
# 385 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameter)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "PrologParser.fsy"
                                    [_1] 
                   )
# 71 "PrologParser.fsy"
                 : 'parameterList));
# 396 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameterList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameter)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "PrologParser.fsy"
                                                           _1@[_3] 
                   )
# 72 "PrologParser.fsy"
                 : 'parameterList));
# 408 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "PrologParser.fsy"
                          [] 
                   )
# 73 "PrologParser.fsy"
                 : 'parameterList));
# 418 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "PrologParser.fsy"
                               [_1] 
                   )
# 76 "PrologParser.fsy"
                 : 'termList));
# 429 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'termList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "PrologParser.fsy"
                                                 _1@[_3] 
                   )
# 77 "PrologParser.fsy"
                 : 'termList));
# 441 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "PrologParser.fsy"
                          [] 
                   )
# 78 "PrologParser.fsy"
                 : 'termList));
# 451 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "PrologParser.fsy"
                                  True 
                   )
# 81 "PrologParser.fsy"
                 : 'body));
# 461 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "PrologParser.fsy"
                                False 
                   )
# 82 "PrologParser.fsy"
                 : 'body));
# 471 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'goal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "PrologParser.fsy"
                               CallExpression(_1) 
                   )
# 83 "PrologParser.fsy"
                 : 'body));
# 482 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'calcExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "PrologParser.fsy"
                                           CalcExpr(_1, _3) 
                   )
# 84 "PrologParser.fsy"
                 : 'body));
# 494 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'body)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "PrologParser.fsy"
                                          AndExpression(_1, _3) 
                   )
# 85 "PrologParser.fsy"
                 : 'body));
# 506 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'body)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "PrologParser.fsy"
                                              OrExpression(_1, _3) 
                   )
# 86 "PrologParser.fsy"
                 : 'body));
# 518 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "PrologParser.fsy"
                                                EqExpr(_1, _3) 
                   )
# 87 "PrologParser.fsy"
                 : 'body));
# 530 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "PrologParser.fsy"
                                                      GrExpr(_1, _3) 
                   )
# 88 "PrologParser.fsy"
                 : 'body));
# 542 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "PrologParser.fsy"
                                                   LeExpr(_1, _3) 
                   )
# 89 "PrologParser.fsy"
                 : 'body));
# 554 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "PrologParser.fsy"
                               Value(_1) 
                   )
# 92 "PrologParser.fsy"
                 : 'calcExpr));
# 565 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'calcExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'calcExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "PrologParser.fsy"
                                                 Plus(_1, _3) 
                   )
# 93 "PrologParser.fsy"
                 : 'calcExpr));
# 577 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'calcExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'calcExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "PrologParser.fsy"
                                                  Subsctruct(_1, _3) 
                   )
# 94 "PrologParser.fsy"
                 : 'calcExpr));
# 589 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'calcExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'calcExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "PrologParser.fsy"
                                                     Multiply(_1, _3) 
                   )
# 95 "PrologParser.fsy"
                 : 'calcExpr));
# 601 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'calcExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'calcExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "PrologParser.fsy"
                                                  Division(_1, _3) 
                   )
# 96 "PrologParser.fsy"
                 : 'calcExpr));
# 613 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "PrologParser.fsy"
                              TypedTerm(TypedNumberTerm(NumberTerm (float _1))) 
                   )
# 99 "PrologParser.fsy"
                 : 'term));
# 624 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "PrologParser.fsy"
                              VariableTerm(Variable(_1)) 
                   )
# 100 "PrologParser.fsy"
                 : 'term));
# 635 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "PrologParser.fsy"
                               TypedTerm(TypedAtomTerm(AtomTerm (_1))) 
                   )
# 101 "PrologParser.fsy"
                 : 'term));
|]
# 647 "PrologParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 28;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : ParseResult option =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
