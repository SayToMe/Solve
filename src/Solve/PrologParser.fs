// Implementation file for parser generated by fsyacc
module PrologParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "PrologParser.fsy"

open Solve

open Solve.TermTypes
open Solve.TermTypes.Transformers

open Solve.Rule
open Solve.Rule.Transformers


# 17 "PrologParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | DOT
  | COMMA
  | MINUS
  | COLON
  | RIGHT_BRACK
  | LEFT_BRACK
  | RIGHT_BRACKET
  | LEFT_BRACKET
  | NULL
  | FALSE
  | TRUE
  | IS
  | STRING of (string)
  | VAR of (string)
  | ATOM of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_DOT
    | TOKEN_COMMA
    | TOKEN_MINUS
    | TOKEN_COLON
    | TOKEN_RIGHT_BRACK
    | TOKEN_LEFT_BRACK
    | TOKEN_RIGHT_BRACKET
    | TOKEN_LEFT_BRACKET
    | TOKEN_NULL
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_IS
    | TOKEN_STRING
    | TOKEN_VAR
    | TOKEN_ATOM
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_prog
    | NONTERM_fact
    | NONTERM_rule
    | NONTERM_signature
    | NONTERM_parameter
    | NONTERM_parameterList
    | NONTERM_body
    | NONTERM_calcExpr

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | DOT  -> 1 
  | COMMA  -> 2 
  | MINUS  -> 3 
  | COLON  -> 4 
  | RIGHT_BRACK  -> 5 
  | LEFT_BRACK  -> 6 
  | RIGHT_BRACKET  -> 7 
  | LEFT_BRACKET  -> 8 
  | NULL  -> 9 
  | FALSE  -> 10 
  | TRUE  -> 11 
  | IS  -> 12 
  | STRING _ -> 13 
  | VAR _ -> 14 
  | ATOM _ -> 15 
  | INT _ -> 16 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_DOT 
  | 2 -> TOKEN_COMMA 
  | 3 -> TOKEN_MINUS 
  | 4 -> TOKEN_COLON 
  | 5 -> TOKEN_RIGHT_BRACK 
  | 6 -> TOKEN_LEFT_BRACK 
  | 7 -> TOKEN_RIGHT_BRACKET 
  | 8 -> TOKEN_LEFT_BRACKET 
  | 9 -> TOKEN_NULL 
  | 10 -> TOKEN_FALSE 
  | 11 -> TOKEN_TRUE 
  | 12 -> TOKEN_IS 
  | 13 -> TOKEN_STRING 
  | 14 -> TOKEN_VAR 
  | 15 -> TOKEN_ATOM 
  | 16 -> TOKEN_INT 
  | 19 -> TOKEN_end_of_input
  | 17 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_prog 
    | 3 -> NONTERM_prog 
    | 4 -> NONTERM_prog 
    | 5 -> NONTERM_fact 
    | 6 -> NONTERM_rule 
    | 7 -> NONTERM_signature 
    | 8 -> NONTERM_parameter 
    | 9 -> NONTERM_parameterList 
    | 10 -> NONTERM_parameterList 
    | 11 -> NONTERM_parameterList 
    | 12 -> NONTERM_body 
    | 13 -> NONTERM_body 
    | 14 -> NONTERM_body 
    | 15 -> NONTERM_calcExpr 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 19 
let _fsyacc_tagOfErrorTerminal = 17

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | DOT  -> "DOT" 
  | COMMA  -> "COMMA" 
  | MINUS  -> "MINUS" 
  | COLON  -> "COLON" 
  | RIGHT_BRACK  -> "RIGHT_BRACK" 
  | LEFT_BRACK  -> "LEFT_BRACK" 
  | RIGHT_BRACKET  -> "RIGHT_BRACKET" 
  | LEFT_BRACKET  -> "LEFT_BRACKET" 
  | NULL  -> "NULL" 
  | FALSE  -> "FALSE" 
  | TRUE  -> "TRUE" 
  | IS  -> "IS" 
  | STRING _ -> "STRING" 
  | VAR _ -> "VAR" 
  | ATOM _ -> "ATOM" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | RIGHT_BRACK  -> (null : System.Object) 
  | LEFT_BRACK  -> (null : System.Object) 
  | RIGHT_BRACKET  -> (null : System.Object) 
  | LEFT_BRACKET  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | IS  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ATOM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 0us; 4us; 1us; 65535us; 0us; 5us; 1us; 65535us; 0us; 6us; 2us; 65535us; 11us; 15us; 16us; 17us; 1us; 65535us; 11us; 12us; 1us; 65535us; 8us; 9us; 1us; 65535us; 21us; 22us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 9us; 11us; 14us; 16us; 18us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 2us; 5us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 7us; 2us; 7us; 10us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 15us; 17us; 19us; 21us; 23us; 25us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 42us; 44us; 46us; |]
let _fsyacc_action_rows = 23
let _fsyacc_actionTableElements = [|2us; 32768us; 0us; 3us; 15us; 10us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 1us; 16389us; 4us; 7us; 1us; 32768us; 3us; 8us; 3us; 32768us; 10us; 19us; 11us; 18us; 14us; 20us; 0us; 16390us; 1us; 32768us; 8us; 11us; 1us; 16395us; 16us; 14us; 2us; 32768us; 2us; 16us; 7us; 13us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 1us; 32768us; 16us; 14us; 0us; 16394us; 0us; 16396us; 0us; 16397us; 1us; 32768us; 12us; 21us; 0us; 16399us; 0us; 16398us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 5us; 6us; 7us; 8us; 10us; 12us; 16us; 17us; 19us; 21us; 24us; 25us; 26us; 27us; 29us; 30us; 31us; 32us; 34us; 35us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 1us; 1us; 4us; 4us; 1us; 1us; 3us; 0us; 1us; 1us; 3us; 0us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 4us; 5us; 6us; 7us; 7us; 7us; 8us; 8us; 8us; 9us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 16387us; 16388us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 16391us; 16392us; 16393us; 65535us; 16394us; 16396us; 16397us; 65535us; 65535us; 16398us; |]
let _fsyacc_reductions ()  =    [| 
# 192 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Solve.Rule.Rule option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 201 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "PrologParser.fsy"
                                   _1 
                   )
# 36 "PrologParser.fsy"
                 : Solve.Rule.Rule option));
# 212 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "PrologParser.fsy"
                              None 
                   )
# 39 "PrologParser.fsy"
                 : 'prog));
# 222 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fact)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "PrologParser.fsy"
                               Some _1 
                   )
# 40 "PrologParser.fsy"
                 : 'prog));
# 233 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "PrologParser.fsy"
                               Some _1 
                   )
# 41 "PrologParser.fsy"
                 : 'prog));
# 244 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'signature)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "PrologParser.fsy"
                                    Rule(_1, True) 
                   )
# 44 "PrologParser.fsy"
                 : 'fact));
# 255 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'signature)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "PrologParser.fsy"
                                                        Rule(_1, _4) 
                   )
# 47 "PrologParser.fsy"
                 : 'rule));
# 267 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameterList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "PrologParser.fsy"
                                                                        Signature(_1, _3) 
                   )
# 50 "PrologParser.fsy"
                 : 'signature));
# 279 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "PrologParser.fsy"
                                 Parameter(TypedTerm(TypedNumberTerm(NumberTerm (float _1)))) 
                   )
# 53 "PrologParser.fsy"
                 : 'parameter));
# 290 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameter)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "PrologParser.fsy"
                                    [_1] 
                   )
# 56 "PrologParser.fsy"
                 : 'parameterList));
# 301 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameterList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameter)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "PrologParser.fsy"
                                                           _3::_1 
                   )
# 57 "PrologParser.fsy"
                 : 'parameterList));
# 313 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "PrologParser.fsy"
                          [] 
                   )
# 58 "PrologParser.fsy"
                 : 'parameterList));
# 323 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "PrologParser.fsy"
                                  True 
                   )
# 61 "PrologParser.fsy"
                 : 'body));
# 333 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "PrologParser.fsy"
                                False 
                   )
# 62 "PrologParser.fsy"
                 : 'body));
# 343 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'calcExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "PrologParser.fsy"
                                          CalcExpr(VariableTerm(Variable(_1)), _3) 
                   )
# 63 "PrologParser.fsy"
                 : 'body));
# 355 "PrologParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "PrologParser.fsy"
                          Value(CalcAny(VariableTerm(Variable("_")))) 
                   )
# 66 "PrologParser.fsy"
                 : 'calcExpr));
|]
# 366 "PrologParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 20;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Solve.Rule.Rule option =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
